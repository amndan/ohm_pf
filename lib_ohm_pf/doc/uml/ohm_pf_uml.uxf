<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<diagram program="umlet" version="13.3">
  <zoom_level>8</zoom_level>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>600</x>
      <y>184</y>
      <w>152</w>
      <h>64</h>
    </coordinates>
    <panel_attributes>&lt;&lt;Struct&gt;&gt;
ohmPf::Sample_t
--
pose : Eigen::Vector3d
weight : std::double</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>576</x>
      <y>296</y>
      <w>264</w>
      <h>104</h>
    </coordinates>
    <panel_attributes>ohmPf::SampleSet
--
- _samples : std::vektor&lt;Sample_t&gt;
- _countSamples : std::int
- (_stamp : std::time)
- (info about samples kd-tree; nn; timestamp)
--
+ normalize() : std::bool</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>672</x>
      <y>240</y>
      <w>40</w>
      <h>72</h>
    </coordinates>
    <panel_attributes>lt=&lt;-
2..n</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;70.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>888</x>
      <y>320</y>
      <w>272</w>
      <h>96</h>
    </coordinates>
    <panel_attributes>ohmPf::Filter
--
- _map : ohmPf::map*
--
//initialization
+ initWithMap(map : ohmPf::map) : std::bool
+ initWithPose(pose : Eigen::vektor3d) : std::bool
+ getMap() : ohmPf::map*
+ updateMap(map : ohmPf::map) : std::bool
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1112</x>
      <y>440</y>
      <w>304</w>
      <h>128</h>
    </coordinates>
    <panel_attributes>&lt;Abstract&gt;
/ohmPf::Map/
--

--
+ calcProbMap() : std::bool
+ getProbOfPosition(x, y : std::double) : std::double
+ isOccupied(x, y : std::double) : std::bool
+ loadMapFromFile(filename : std::string) : bool
+ storeMapOnFile(filename : std::string) : bool</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>208</x>
      <y>160</y>
      <w>168</w>
      <h>56</h>
    </coordinates>
    <panel_attributes>&lt;&lt;Struct&gt;&gt;
ohmPf::Pose_t
--
pose : Eigen::Vector
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1224</x>
      <y>64</y>
      <w>400</w>
      <h>320</h>
    </coordinates>
    <panel_attributes>TODO
--</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>600</x>
      <y>416</y>
      <w>280</w>
      <h>80</h>
    </coordinates>
    <panel_attributes>&lt;&lt;Abstract&gt;&gt;
/ohmPf::Sensor/
--

--
+ updateFilter(filter : ohmPf::Filter *) : std::bool
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>400</x>
      <y>512</y>
      <w>320</w>
      <h>72</h>
    </coordinates>
    <panel_attributes>ohmPf::OdomDiff
--
- _params : ohmPf::OdomParams
--
+ setParams(params : ohmPf::OdomParams) : bool
+ updateFilter(filter : ohmPf::Filter *) : std::bool</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1040</x>
      <y>208</y>
      <w>168</w>
      <h>80</h>
    </coordinates>
    <panel_attributes>&lt;&lt;Struct&gt;&gt;
ohmPf::OdomDiffParams
--
a1 : std::double
a2 : std::double
...</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>760</x>
      <y>512</y>
      <w>320</w>
      <h>72</h>
    </coordinates>
    <panel_attributes>ohmPf::Laser2d
--
- _params : ohmPf::LaserParams
--
+ setParams(params : ohmPf::OdomParams) : bool
+ updateFilter(filter : ohmPf::Filter *) : std::bool
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>216</x>
      <y>592</y>
      <w>144</w>
      <h>80</h>
    </coordinates>
    <panel_attributes>&lt;&lt;Struct&gt;&gt;
ohmPf::Laser2dParams
--
zhit : std::double
zphi : std::double
...</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1064</x>
      <y>608</y>
      <w>192</w>
      <h>64</h>
    </coordinates>
    <panel_attributes>ohmPf::TsdMap
--
- _map : obviously::tsdGrid &lt;-- ?
--
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1272</x>
      <y>608</y>
      <w>192</w>
      <h>64</h>
    </coordinates>
    <panel_attributes>ohmPf::OccMap
--
- _map : obviously::tsdGrid &lt;-- ?
--</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1152</x>
      <y>560</y>
      <w>24</w>
      <h>64</h>
    </coordinates>
    <panel_attributes>lt=&lt;.
</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;60.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1352</x>
      <y>560</y>
      <w>24</w>
      <h>64</h>
    </coordinates>
    <panel_attributes>lt=&lt;.
</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;60.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>888</x>
      <y>208</y>
      <w>128</w>
      <h>80</h>
    </coordinates>
    <panel_attributes>&lt;&lt;Struct&gt;&gt;
ohmPf::FilterParams
--
sampleMin : std::int
sampleMax : std::int
...</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>896</x>
      <y>704</y>
      <w>504</w>
      <h>80</h>
    </coordinates>
    <panel_attributes>ohmPf::GaussianPdf
--

--
+ getRandomSample(mu : Eigen::Vector3d, sigmaT : std::double, sigmaPhi : std::double) : ohmPf::Sample_t
+ getRandomValue(mu : std::double, sigma : std::double) : std::double
+ (getProbability(x : std::double, mu : std::double, sigma std::double) : std::double)</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>0</x>
      <y>24</y>
      <w>400</w>
      <h>320</h>
    </coordinates>
    <panel_attributes>Ablage
--</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>8</x>
      <y>56</y>
      <w>168</w>
      <h>112</h>
    </coordinates>
    <panel_attributes>ohmPf::Pose_t
--
+ _pose : Eigen::Vector
--
+ getPhiRad() : std::double
+ getPhiDeg() : std::double
+ getX() : std::double
+ getY() : std::double
+ getPose() : Eigen::Vector</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>208</x>
      <y>72</y>
      <w>144</w>
      <h>56</h>
    </coordinates>
    <panel_attributes>ohmPf::Sample_t
--
- _pose : omhPf::Pose_t
- _weight : std::double</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>584</x>
      <y>600</y>
      <w>320</w>
      <h>72</h>
    </coordinates>
    <panel_attributes>ohmPf::CeilCam
--
- _params : ohmPf::CeilCamParams
--
+ setParams(params : ohmPf::CeilCamParams) : bool
+ updateFilter(filter : ohmPf::Filter *) : std::bool</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>216</x>
      <y>488</y>
      <w>144</w>
      <h>80</h>
    </coordinates>
    <panel_attributes>&lt;&lt;Struct&gt;&gt;
ohmPf::CeilCamParams
--
foo : std::double
bar : std::double
...</panel_attributes>
    <additional_attributes/>
  </element>
</diagram>
